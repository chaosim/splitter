// Generated by CoffeeScript 1.6.3
(function() {
  var app;

  window.computedStyle = function(e, p, g) {
    g = window.getComputedStyle;
    return (g ? g(e) : e.currentStyle)[p.replace(/-(\w)/gi, function(w, l) {
      return l.toUpperCase();
    })];
  };

  app = angular.module('splitter', []);

  app.directive('splitter', function() {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        var $, clientXProp, drag, draggingHandler, handler, heightProp, i, jqPane, jqPanes, left, leftProp, length, maxWidthProp, minWidthProp, pane, panes, rightPane, rightProp, topProp, vertical, verticalClass, widthProp, _i;
        panes = element.children();
        length = panes.length;
        if (length < 2) {
          return;
        }
        element.css('position', 'absolute');
        $ = angular.element;
        vertical = attrs.vertical;
        if (vertical) {
          widthProp = 'height';
          heightProp = 'width';
          minWidthProp = 'min-height';
          maxWidthProp = 'max-height';
          leftProp = 'top';
          topProp = 'left';
          rightProp = 'bottom';
          clientXProp = 'clientY';
          verticalClass = 'vertical';
        } else {
          widthProp = 'width';
          heightProp = 'height';
          minWidthProp = 'min-width';
          maxWidthProp = 'max-width';
          leftProp = 'left';
          topProp = 'top';
          rightProp = 'right';
          clientXProp = 'clientX';
          verticalClass = 'horizontal';
        }
        drag = false;
        draggingHandler = null;
        left = 0;
        jqPanes = (function() {
          var _i, _results;
          _results = [];
          for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
            _results.push($(panes[i]));
          }
          return _results;
        })();
        for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
          pane = panes[i];
          jqPane = jqPanes[i];
          jqPane.css('position', 'absolute');
          jqPane.minWidth = parseInt(computedStyle(pane, minWidthProp) || '10');
          jqPane.width = parseInt(computedStyle(pane, widthProp) || jqPane.css(widthProp, '100px') && '100');
          jqPane.maxWidth = parseInt(computedStyle(pane, maxWidthProp) || '10000');
          if (i < length - 1) {
            handler = angular.element('<div class="' + verticalClass + ' split-handler" style="position:absolute;"></div>');
            left = left + jqPane.width;
            handler.leftPane = jqPane;
            handler.rightPane = rightPane = jqPanes[i + 1];
            handler.css(leftProp, computedStyle(panes[i + 1], leftProp));
            handler.css(heightProp, computedStyle(element[0], heightProp));
            handler.css(topProp, computedStyle(element[0], topProp));
            (function(handler) {
              return handler.bind('mousedown', function(ev) {
                ev.preventDefault();
                drag = true;
                return draggingHandler = handler;
              });
            })(handler);
            jqPane.after(handler);
          }
        }
        console.log(left);
        (function(widthProp, minWidthProp, maxWidthProp, leftProp, rightProp, clientXProp) {
          return element.bind('mousemove', function(ev) {
            var bounds, boundsLeft, pos, width;
            if (!drag || length < 2) {
              return;
            }
            bounds = element[0].getBoundingClientRect();
            pos = 0;
            boundsLeft = bounds[leftProp];
            width = bounds[rightProp] - boundsLeft;
            pos = ev[clientXProp] - boundsLeft;
            if (pos < draggingHandler.leftPane.minWidth) {
              return;
            }
            if (pos > draggingHandler.leftPane.maxWidth) {
              return;
            }
            if (width - pos < draggingHandler.rightPane.minWidth) {
              return;
            }
            if (width - pos > draggingHandler.rightPane.maxWidth) {
              return;
            }
            draggingHandler.css(leftProp, pos + 'px');
            draggingHandler.leftPane.css(widthProp, pos + 'px');
            return draggingHandler.rightPane.css(leftProp, pos + 'px');
          });
        })(widthProp, minWidthProp, maxWidthProp, leftProp, rightProp, rightProp);
        return angular.element(document).bind('mouseup', function(ev) {
          return drag = false;
        });
      }
    };
  });

}).call(this);

/*
//@ sourceMappingURL=splitter.map
*/
